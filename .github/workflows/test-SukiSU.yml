name: 编译一加ACE5内核-lz4k

on:
  workflow_dispatch:

env:
  RETENTION_COUNT: 7  # 保留的发布版本数量
  CPU: 'sm8650'
  FEIL: 'oneplus_ace5'
  CPUD: 'pineapple'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: '-android14-11-o-chiyu'
  VFS: 'true' #启用 true  不启用 false
  BUILD_METHOD: 'gki'
  SUSFS_CI: 'true'
  ZRAM: 'true'
  KPM: 'true'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 最大化建筑空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 配置 Git
        run: |
          git config --global user.name "ychenxuan"
          git config --global user.email "3494167979@qq.com"

      - name: 安装依赖项
        run: |

          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl

      - name: 显示所选配置
        run: |
          echo "Selected CPU: ${{ env.CPU }}"
          echo "Selected FEIL: ${{ env.FEIL }}"
          echo "Selected CPUD: ${{ env.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ env.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ env.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ env.BUILD_METHOD }}"
          echo "Selected SUSFS_CI: ${{ env.SUSFS_CI }}"
          echo "Selected ZRAM: ${{ env.ZRAM }}"
          echo "Selected VFS: ${{ env.VFS }}"
          echo "Selected KPM: ${{ env.KPM }}"
          echo "Selected KERNEL_NAME: ${{ env.KERNEL_NAME }}"

      - name: 安装软件仓库工具
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: 初始化版本库并同步
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/${{ env.CPU }} -m ${{ env.FEIL }}.xml --depth=1
          repo sync
          if [  -e kernel_platform/common/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [  -e kernel_platform/msm-kernel/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name:  删除 -dirty 后缀
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: 添加 SukiSU-Ultra
        id: ksu_version
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=$KSU_VERSION/" kernel/Makefile

      - name: 应用 SUSFS 修补程序 SukiSU-Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform

           echo "正在给内核打susfs补丁"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/



          if [ "${{ env.ZRAM }}" == "true" ]; then
          echo "正在给内核打zram补丁"
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi



          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true

      - name: 应用 Hide Stuff 修补程序
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: 应用vfs补丁
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ env.VFS }}" = "true" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "正在打vfs补丁"
          patch -p1 -F 3 < syscall_hooks.patch
          echo "vfs_patch完成"
          fi

      - name: 应用LZ4KD补丁
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ env.ZRAM }}" = "true" ]; then
            cp ../../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            echo "正在打lz4kd补丁"
            patch -p1 -F 3 < lz4kd.patch || true
            echo '完成LZ4KD补丁'
          fi

      - name: 添加配置设置
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"

          # SukiSU Ultra config
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          if [ "${{ env.VFS }}" = "true" ]; then
          echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
          fi
          # VFS config
          if [ "${{ env.VFS }}" = "true" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          fi

          if [ "${{ env.VFS }}" = "false" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
          fi

          # SUSFS config
          if [ "${{ env.VFS }}" = "true" ]; then
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi

          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

          # LZ4KD配置
          if [ "${{ env.ZRAM }}" = "true" ]; then
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig

            if [ "${{ env.KERNEL_VERSION }}" = "5.10" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
              echo "CONFIG_MODULE_SIG=n" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZO=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_DEF_COMP_LZ4KD=y" >> "$CONFIG_FILE"
            fi


            if [ "${{ env.KERNEL_VERSION }}" != "6.6" ] && [ "${{ env.KERNEL_VERSION }}" != "5.10" ]; then
              if [ "${{ env.KERNEL_VERSION }}" != "5.15" ]; then
                sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' "$CONFIG_FILE"
              fi
              if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
                sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
              else
                echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              fi
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{ env.KERNEL_VERSION }}" = "6.6" ]; then
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
              sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
            fi

            if [ "${{env.ANDROID_VERSION }}" = "android14" ] || [ "${{ env.ANDROID_VERSION }}" = "android15" ]; then
              if [  -e ./common/modules.bzl ]; then
                sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./common/modules.bzl"
              fi
              if [  -e ./msm-kernel/modules.bzl ]; then
                sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "./msm-kernel/modules.bzl"
                echo "CONFIG_ZSMALLOC=y" >> "msm-kernel/arch/arm64/configs/${{ env.CPUD }}-GKI.config"
                echo "CONFIG_ZRAM=y" >> "msm-kernel/arch/arm64/configs/${{ env.CPUD }}-GKI.config"
              fi

              
              echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"
            elif [ "${{ env.KERNEL_VERSION }}" = "5.10" ] || [ "${{ env.KERNEL_VERSION }}" = "5.15" ]; then
              rm "common/android/gki_aarch64_modules"
              touch "common/android/gki_aarch64_modules"
            fi

            if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
              echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
              echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
              echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
            fi
          fi

        

      - name: 添加制作名称
        run: |
          cd kernel_workspace/kernel_platform
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          sed -i 's|echo "\$res"|echo "'"$(echo "${{ env.KERNEL_NAME }}" | sed 's/[\&/]/\\&/g')"'"|g' ./common/scripts/setlocalversion
           
      - name: 构建内核
        run: |
          cd kernel_workspace

          if [[ "${{ env.CPU }}" == "sm8650" || "${{ env.CPU }}" == "sm8750" ]]; then
            ./kernel_platform/build_with_bazel.py -t ${{ env.CPUD }} gki --action_env=KSU_VERSION 
          else
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ env.CPUD }} gki
          fi
      - name: 克隆 AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git

          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ env.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ env.CPUD }}-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ env.CPUD }}-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_workspace/kernel"

          # 查找 Image 文件
          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          fi

          # 拷贝 Image
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "源文件与目标相同，跳过复制"
            fi
            cp "$dir1"Image ./AnyKernel3/Image
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi

          # 可选复制其它新文件（如果存在）
          if [ "${{ github.event.inputs.CPU }}" = "sm8750" ]; then
          for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
            if [ -f "$dir1$file" ]; then
              target_name="$file"
              # 特殊处理 system_dlkm.erofs.img 的目标名
              if [ "$file" = "system_dlkm.erofs.img" ]; then
                target_name="system_dlkm.img"
              fi
              cp "$dir1$file" "./AnyKernel3/$target_name"
            else
              echo "$file 不存在，跳过复制"
            fi
          done
          fi


      - name: 启用KPM
        run: |
         if [ "${{ env.KPM }}" = "true" ]; then
          cd /home/runner/work/Action_OnePlus_MKSU_SUSFS/Action_OnePlus_MKSU_SUSFS/kernel_workspace/kernel_platform/out/msm-kernel-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/dist
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image
         fi

      - name: 下载 SUSFS 模块（CI）
        run: |
         

         if [ "${{ env.SUSFS_CI }}" = "true" ]; then
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
            jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No successful run found for branch v1.5.2+"
            exit 1
          fi

          ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')

          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs.zip "$ARTIFACT_URL"
          cp ksu_module_susfs.zip ./AnyKernel3/ksu_module_susfs_1.5.2+_CI.zip
          
          fi
          

      - name: 下载 SUSFS 模块（Release）
        run: |
          
          if [ "${{ env.SUSFS_CI }}" = "false" ]; then
          wget https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          cp ksu_module_susfs_1.5.2+.zip ./AnyKernel3/ksu_module_susfs_1.5.2+_Release.zip
          fi
          
      - name: 设置 suffix
        id: suffix
        run: |
          echo "value=${{ env.KPM == 'true' && '_KPM' || '' }}${{ env.VFS == 'true' && '_VFS' || '' }}${{ env.ZRAM == 'true' && '_LZ4KD' || '' }}" >> $GITHUB_OUTPUT

      - name: 从FEIL中删除 _uv 后缀
        id: feil_clean
        run: |
          clean_feil="${{ env.FEIL }}"
          clean_feil="${clean_feil%_v}"  # 去掉结尾的 _v（如果有）
          clean_feil="${clean_feil%_u}"  # 去掉结尾的 _u（如果有）
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: 打包 AnyKernel3 (ZIP)
        run: |
          cd $GITHUB_WORKSPACE/AnyKernel3
          zip -r ../AnyKernel3_KernelSU_${{ env.KSUVER }}_${{ env.FEIL }}.zip ./*
          cd ..

     # - name: 打包原始镜像 (ZIP)
       # run: |
       #   cd $GITHUB_WORKSPACE/kernel_workspace
      #    zip -r ../Image_KernelSU_${{ env.KSUVER }}_${{ env.FEIL }}.zip ./*

      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: |
            *.zip
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips
         
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "build-${{ github.run_id }}"
          name: "OnePlus_ACE5 Build ${{ github.run_number }}"
          body: |
            每日自动编译 SukiSU-Ultra 内核
            - 机型： 一加ACE5
            - 特性：MKSU+SUSFS+VFS+KPM+LZ4K
            - 编译时间: ${{ github.event.repository.updated_at }}
            - 内核版本: ${{ needs.build.outputs.ksuver }}
            - 推荐管理器：[SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            - 如果构建的内核版本没变，不必更新！
            - 使用 AnyKernel3/Recovery/TWRP 刷入
            
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_KernelSU_*.zip
            release_zips/Image_KernelSU_*.zip

      - name: 清理旧版本
        uses: dev-drprasad/delete-older-releases@v0.3.4
        continue-on-error: true
        timeout-minutes: 5
        with:
          keep_latest: ${{ env.RETENTION_COUNT }}
          delete_tags: true
          delete_tag_pattern: 'build-*'
        env:
          GITHUB_TOKEN: ${{ github.token }}
